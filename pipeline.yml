resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: pcf-pipelines
  type: git
  source:
    uri: ((pcf_pipelines_uri))
    branch: ((pcf_pipelines_branch))

- name: s3-installation-zip
  type: s3
  source:
    versioned_file: ((s3_installation_zip_versioned_file))
    region_name: ((s3_region_name))
    endpoint: ((s3_endpoint))
    server_side_encryption: ((s3_server_side_encryption))
    bucket: ((s3_installation_zip_bucket))
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))

- name: s3-exported-diagnostic-report-json
  type: s3
  source:
    versioned_file: ((s3_exported_diagnostic_report_json_versioned_file))
    region_name: ((s3_region_name))
    endpoint: ((s3_endpoint))
    server_side_encryption: ((s3_server_side_encryption))
    bucket: ((s3_exported_diagnostic_report_json_bucket))
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))

- name: tile
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ((product_slug))
    product_version: ((product_version_regex))
    sort_by: semver
    region: ((pivnet_region))

- name: stemcell
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ((stemcell_slug))
    product_version: ((product_stemcell_version_regex))
    sort_by: semver
    region: ((pivnet_region))

- name: opsman-lock
  type: pool
  source:
    uri: ((opsman_lock_uri))
    branch: ((opsman_lock_branch))
    username: ((opsman_lock_username))
    password: ((opsman_lock_password))
    retry_delay: ((opsman_lock_retry_delay))
    pool: ((opsman_lock_pool))

jobs:
- name: upload-stemcell
  plan:
  - aggregate:
    - get: pcf-pipelines
    - get: stemcell
      trigger: true
      params: {globs: [((stemcell_globs))]}
  - task: upload-stemcell
    file: pcf-pipelines/tasks/upload-stemcell/task.yml
    params:
      OPSMAN_DOMAIN_OR_IP_ADDRESS: ((opsman_domain_or_ip_address))
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_secret))

- name: upload-tile
  plan:
  - aggregate:
    - get: pcf-pipelines
    - get: pivnet-product
      resource: tile
      trigger: true
      params: {globs: [((product_globs))]}
  - task: upload-tile
    file: pcf-pipelines/tasks/upload-product/task.yml
    params:
      OPSMAN_DOMAIN_OR_IP_ADDRESS: ((opsman_domain_or_ip_address))
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_secret))

- name: stage-and-apply-changes
  plan:
  - aggregate:
    - put: opsman-lock
      params: {acquire: true}
    - get: pcf-pipelines
    - get: stemcell
      passed: [upload-stemcell]
      trigger: true
      params: {globs: [((stemcell_globs))]}
    - get: pivnet-product
      resource: tile
      passed: [upload-tile]
      trigger: true
      params: {globs: [((product_globs))]}

  # Notice that we need to stage the tile, THEN stage the stemcell.
  # This cannot be done in parallel. The tile must be staged before
  # we can stage & associate the stemcell to the tile.
  - task: stage-tile
    file: pcf-pipelines/tasks/stage-product/task.yml
    params:
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
      OPSMAN_DOMAIN_OR_IP_ADDRESS: ((opsman_domain_or_ip_address))
  - task: stage-stemcell
    file: pcf-pipelines/tasks/stage-stemcell/task.yml
    params:
      OPSMAN_DOMAIN_OR_IP_ADDRESS: ((opsman_domain_or_ip_address))
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
  - task: selective-deploy
    file: pcf-pipelines/tasks/selective-deploy/task.yml
    params:
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
      OPSMAN_DOMAIN_OR_IP_ADDRESS: ((opsman_domain_or_ip_address))

  - aggregate:
    - do:
      - task: export-opsmgr-settings
        file: pcf-pipelines/tasks/export-opsmgr-settings/task.yml
        params:
          OPSMAN_CLIENT_ID: ((opsman_client_id))
          OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
          OPSMAN_DOMAIN_OR_IP_ADDRESS: ((opsman_domain_or_ip_address))
          OPSMAN_SETTINGS_FILENAME: installation.zip
      - put: s3-installation-zip
        params: {file: opsmgr-settings/installation.zip}
    - do:
      - task: export-opsmgr-diagnostic-report
        file: pcf-pipelines/tasks/export-opsmgr-diagnostic-report/task.yml
        params:
          OPSMAN_CLIENT_ID: ((opsman_client_id))
          OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
          OPSMAN_DOMAIN_OR_IP_ADDRESS: ((opsman_domain_or_ip_address))
      - put: s3-exported-diagnostic-report-json
        params: {file: diagnostic-report/exported-diagnostic-report.json}

  ensure:
    put: opsman-lock
    params: {release: opsman-lock}
